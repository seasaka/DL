import numpy as np
def unitstep_activation(x):
  if x<= 0:
    return 0
  else:
    return 1
def lin_perceptron_function(x,w,b):
  v=np.matmul (w,x.T)+b
  y= unitstep_activation(v)
  return y
#testcases

test1=np.array([[0.0,0.0]])
test2=np.array([[0.0,1.0]])
test3=np.array([[1.0,0.0]])
test4=np.array([[1.1,1.1]])
def AND_logicfucntion(x):
  w= np.array([[1,1]])
  b=-1.5
  return lin_perceptron_function(x,w,b)
y1_AND= AND_logicfucntion(test1)
y2_AND= AND_logicfucntion(test2)
y3_AND= AND_logicfucntion(test3)
y4_AND= AND_logicfucntion(test4)
#print outputs
print("AND(0,0)= ",y1_AND)
print("AND(0,1)= ",y2_AND)
print("AND(1,0)= ",y3_AND)
print("AND(1,1)= ",y4_AND)
def OR_logicfucntion(x):
  w= np.array([[1,1]])
  b=-0.5
  return lin_perceptron_function(x,w,b)
y1_OR= OR_logicfucntion(test1)
y2_OR= OR_logicfucntion(test2)
y3_OR= OR_logicfucntion(test3)
y4_OR= OR_logicfucntion(test4)
#print outputs
print("OR(0,0)= ",y1_OR)
print("OR(0,1)= ",y2_OR)
print("OR(1,0)= ",y3_OR)
print("OR(1,1)= ",y4_OR)
def NAND_logicfucntion(x):
  w= np.array([[-1,-1]])
  b=1.5
  return lin_perceptron_function(x,w,b)
y1_NAND= NAND_logicfucntion(test1)
y2_NAND= NAND_logicfucntion(test2)
y3_NAND= NAND_logicfucntion(test3)
y4_NAND= NAND_logicfucntion(test4)
#print outputs
print("NAND(0,0)= ",y1_NAND)
print("NAND(0,1)= ",y2_NAND)
print("NAND(1,0)= ",y3_NAND)
print("NAND(1,1)= ",y4_NAND)
def x_or(x):
  h1=NAND_logicfucntion(x)
  h2=OR_logicfucntion(x)
  h=np.array([h1,h2])
  y= AND_logicfucntion(h)
  return y
#testcases
y1_x_or= x_or(test1)
y2_x_or= x_or(test2)
y3_x_or= x_or(test3)
y4_x_or= x_or(test4)
#print outputs
print("xor(0,0)= ",y1_x_or)
print("xor(0,1)= ",y2_x_or)
print("xor(1,0)= ",y3_x_or)
print("xor(1,1)= ",y4_x_or)


def switch_case_perceptron(operation, input_values):
  input_values = np.array(input_values)
  input_values = input_values.reshape(1, -1)

  if operation == "AND":
    output = AND_logicfucntion(input_values)
  elif operation == "OR":
    output = OR_logicfucntion(input_values)
  elif operation == "NAND":
    output = NAND_logicfucntion(input_values)
  elif operation == "XOR":
    output = x_or(input_values)
  else:
    return "Invalid operation"

  print(f"{operation}{tuple(input_values[0])}: Output = {output}")
  return output

# Example usage:
switch_case_perceptron("AND", [0, 0])  # AND(0, 0): Output = [0]
switch_case_perceptron("OR", [0, 1])   # OR(0, 1): Output = [1]
switch_case_perceptron("NAND", [1, 0]) # NAND(1, 0): Output = [1]
switch_case_perceptron("XOR", [1, 1])  # XOR(1, 1): Output = [0]
switch_case_perceptron("INVALID", [0, 0]) # Invalid operation

#verify GPU availability using tensorflow
import tensorflow as tf
print("GPU Available",tf.config.list_physical_devices('GPU'))
import time
# Measure execution time for AND_fun
start_time = time.time()
result = AND_logicfucntion(np.array([[1, 1]]))  # Example input
end_time = time.time()

execution_time = end_time - start_time
print(f"Execution time for AND_fun: {execution_time} seconds")
import time
# Measure execution time for OR_fun
start_time = time.time()
result = OR_logicfucntion(np.array([[1, 1]]))  # Example input
end_time = time.time()

execution_time = end_time - start_time
print(f"Execution time for OR_fun: {execution_time} seconds")

import time
# Measure execution time for NAND_fun
start_time = time.time()
result = NAND_logicfucntion(np.array([[1, 1]]))  # Example input
end_time = time.time()

execution_time = end_time - start_time
print(f"Execution time for NAND_fun: {execution_time} seconds")
import time
# Measure execution time for xor_fun
start_time = time.time()
result = x_or(np.array([[1, 1]]))  # Example input
end_time = time.time()

execution_time = end_time - start_time
print(f"Execution time for xOR_fun: {execution_time} seconds")
