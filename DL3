import numpy as np
import matplotlib.pyplot as plt
x = np.array([[0,0,1,1],[0,1,0,1]])
y = np.array([[0,1,1,0]])
n_x = 2
n_y = 1
n_h = 2
m=x.shape[1]
lr = 0.1
w1 = np.random.rand(n_h,n_x)
w2 = np.random.rand(n_y,n_h)
losses = []
def sigmoid(z):
    z = 1/(1+np.exp(-z))
    return z
#forward propagation
def forward_prop(w1,w2,x):
  z1 = np.dot(w1,x)
  a1 = sigmoid(z1)
  z2 = np.dot(w2,a1)
  a2 = sigmoid(z2)
  return z1,a1,z2,a2
#backward propagation
def back_prop(m,w1,w2,z1,a1,z2,a2,y):
  dz2 = a2 - y
  dw2 = np.dot(dz2,a1.T)/m
  dz1 = np.dot(w2.T,dz2)*(a1*(1-a1))
  dw1 = np.dot(dz1,x.T)/m
  return dz2,dw2,dz1,dw1
iterations = 10000    #training
for i in range(iterations):
  z1, a1, z2, a2 = forward_prop(x, w1, w2)
  loss = -(1/m)*np.sum(y*np.log(a2) + (1-y)*np.log(1-a2))
  losses.append(loss)
  dz2,dw2,dz1,dw1 = back_prop(m,w1,w2,z1,a1,z2,a2,y)
  w1 = w1 - lr*dw1
  w2 = w2 - lr*dw2
plt.figure(figsize=(8, 6))
plt.plot(range(len(losses)), losses, label="Loss")
plt.title("Loss vs. Epochs", fontsize=14)
plt.xlabel("Epochs", fontsize=12)
plt.ylabel("Loss", fontsize=12)
plt.grid(True)
plt.legend()
plt.show()
def predict(w1,w2,input):
  z1,a1,z2,a2 = forward_prop(w1,w2,input)
  a2 = np.squeeze(a2)
  if a2>=0.5:
    print("for input", [i[0] for i in input], "output is 1")
  else:
     print("for input", [i[0] for i in input], "output is 0")
test = np.array([[1],[0]])
predict(w1,w2,test)
test = np.array([[0],[0]])
predict(w1,w2,test)
test = np.array([[0],[1]])
predict(w1,w2,test)
test = np.array([[1],[1]])
predict(w1,w2,test)
